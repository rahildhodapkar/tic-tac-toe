#define _POSIX_C_SOURCE 200809L
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <netdb.h>
#include <signal.h>
#include <errno.h>
#include <pthread.h>

#define PORT 15000

typedef struct game {
    int clS_X;
    int clS_O;
    char name_X[64];
    char name_O[64];
    char board[10];
    int index;
    int active;
} game;

game games[100];
pthread_mutex_t games_mutex = PTHREAD_MUTEX_INITIALIZER;

char *names[200];
pthread_mutex_t names_mutex = PTHREAD_MUTEX_INITIALIZER;

volatile int sigRun;

void* gameHandler(void *gamePtr);

void signalHandler(int sigNum) {
    if (sigNum == SIGINT || sigNum == SIGTERM) {
        sigRun = 1;
    }
}

void serverInitialize(char *port) {
    struct sigaction act;
    act.sa_handler = signalHandler;
    act.sa_flags = 0;
    sigemptyset(&act.sa_mask);
    sigaction(SIGINT, &act, NULL);
    sigaction(SIGTERM, &act, NULL);
    struct addrinfo hints, *infoList, *info;
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE;
    int e, s;
    e = getaddrinfo("0.0.0.0", port, &hints, &infoList);
    for (info = infoList; info != NULL; info = info->ai_next) {
        s = socket(info->ai_family, info->ai_socktype, info->ai_protocol);
        if (s == -1) {
            continue;
        }
        e = bind(s, info->ai_addr, info->ai_addrlen);
        if (e) {
            close(s);
            continue;
        }
        e = listen(s, SOMAXCONN);
        if (e) {
            close(s);
            continue;
        }
        break;
    }
    freeaddrinfo(infoList);
    if (info == NULL) {
        fprintf(stderr, "Oh no, we cannot bind!\n");
        return;
    }
    struct sockaddr_storage clLen;
    socklen_t adLen = sizeof(clLen);
    int clS_X, clS_O;
    char *board = malloc(sizeof(char) * 10);
    for (int i = 0; i < 9; i++) {
        board[i] = '.';
    }
    board[9] = '\0';
    pthread_t gameThread;
    while (!sigRun) {
        for (int i = 0; i < 2; i++) {
            int clS = accept(s, (struct sockaddr *)&clLen, &adLen);
            if (clS == -1) {
                perror("accept");
                continue;
            }
            if (i == 0) {
                clS_X = clS;
            } else {
                clS_O = clS;
            }
        }
        game *new_game = NULL;
        pthread_mutex_lock(&games_mutex);
        for (int i = 0; i < 100; i++) {
            if (!games[i].active) {
                new_game = &games[i];
                new_game->index = i;
                break;
            }
        }
        pthread_mutex_unlock(&games_mutex);

        if (new_game == NULL) {
            continue;
        }

        new_game->clS_X = clS_X;
        new_game->clS_O = clS_O;
        strcpy(new_game->board, board);
        new_game->active = 1;

        pthread_create(&gameThread, NULL, gameHandler, (void *)new_game);
        void *gameHandlerReturn;
        pthread_join(gameThread, &gameHandlerReturn);
        int res = (int)(intptr_t)gameHandlerReturn;
        if (res == 1) {
            for (int i = 0; i < 200; i++) {
                if (strcmp(new_game->name_O, names[i]) == 0 || strcmp(new_game->name_X, names[i]) == 0) {
                    names[i] = " ";
                }
            }
            new_game = NULL;
            pthread_detach(gameThread);
            break;
        }
    }
    close(s);
    free(board);
}

char *receiveMessage(int socket) {
    static char buffer[150];
    memset(buffer, 0, sizeof(buffer));

    int bytes = recv(socket, buffer, sizeof(buffer) - 1, 0);
    if (bytes <= 0) {
        perror("recv");
        return NULL;
    }
    buffer[bytes] = '\0';
    return buffer;
}

void* gameHandler(void *gameptr) {
    game *g = (game*)gameptr;
    for (int i = 0; i < 2; i++) {
        int currSock, validInput = 0;
        if (i == 0) {
            currSock = g->clS_X;
        } else {
            currSock = g->clS_O;
        }
        while (validInput == 0) {
            char *recvMsg = receiveMessage(currSock);
            if (i == 1) {
                printf("%s\n", recvMsg);
            }
            if (recvMsg == NULL) {
                exit(1);
            } else {
                const char temp[2] = "|";
                char *token = strtok(recvMsg, temp);
                if (strcmp(token, "PLAY") == 0) {
                    token = strtok(NULL, temp); 
                    token = strtok(NULL, temp); 
                    if (strlen(token) < 64) { 
                        if (i == 0) {
                            strcpy(g->name_X, token);
                        } else {
                            strcpy(g->name_O, token);
                        }
                        int cont = 0;
                        pthread_mutex_lock(&names_mutex);
                        for (int j = 0; j < 200; j++) {
                            if (i == 0) {
                                if (strcmp(g->name_X, names[j]) == 0) {
                                    send(currSock, "INVL|38|Must use different name than opponent|", 47, 0);
                                    memset(g->name_X, 0, sizeof(char) * 64);
                                    cont = 1;
                                    break;
                                }
                            } else {
                                if (strcmp(g->name_O, names[j]) == 0) {
                                    send(currSock, "INVL|38|Must use different name than opponent|", 47, 0);
                                    memset(g->name_O, 0, sizeof(char) * 64);
                                    cont = 1;
                                    break;
                                }
                            }
                        }
                        pthread_mutex_unlock(&names_mutex);
                        if (cont == 1) {
                            cont = 0;
                            continue;
                        } else {
                            for (int j = 0; j < 200; j++) {
                                if (strcmp(names[i], " ") == 0) {
                                    if (currSock == g->clS_X) {
                                        names[i] = g->name_X;
                                    } else {
                                        names[i] = g->name_O;
                                    }
                                }
                            }
                        }
                        validInput = 1;
                        send(currSock, "WAIT|0|", 7, 0); 
                    } else {
                        send(currSock, "INVL|17|Name is too long|", 24, 0); 
                    } 
                }
            }
        }
    }
    char destX[150], destO[150];
    snprintf(destX, 150, "BEGN|%ld|X|%s|", strlen(g->name_O) + 2, g->name_O);
    snprintf(destO, 150, "BEGN|%ld|O|%s|", strlen(g->name_X) + 2, g->name_X);
    send(g->clS_X, destX, strlen(destX), 0);
    send(g->clS_O, destO, strlen(destO), 0);

    int gameStatus = 0;
    char currentPlayer = 'X';
    int currSock = 0, oppSock = 0, drawRejected = 0;
    int win = 0;
    int start = 0;
    while (gameStatus == 0 && !sigRun) {
        printf("Current player is %c\n", currentPlayer);
        if (drawRejected != 1) { // checks if current player rejected a draw. If they did, then they are still the current player
            if (start != 0) {currentPlayer = currentPlayer == 'X' ? 'O' : 'X';}
            if (currentPlayer == 'X') {
                currSock = g->clS_X;
                oppSock = g->clS_O;
            } else {
                currSock = g->clS_O;
                oppSock = g->clS_X;
            }
        }
        /**
         * make sure that the draw mechanism works
         * just do game logic checks
         * make sure that error filled messages are handled
        */
        start++;
        char buffer[150];
        memset(buffer, 0, sizeof(buffer));
        int isValid = 0;
        while (isValid == 0) {
            char *recvMsg = receiveMessage(currSock);
            printf("%s\n", recvMsg);
            char *token = strtok(recvMsg, "|");
            printf("%s\n", token);
            if (strcmp(token, "MOVE") == 0) {
                int x, y;
                token = strtok(NULL, "|");
                token = strtok(NULL, "|");
                if (strchr(token, currentPlayer) == NULL) {
                    send(currSock, "INVL|29|Please enter a valid command|", 37, 0);
                    continue;
                }
                token = strtok(NULL, "|");
                int xFlag = 0;
                for (int i = 0; token[i] != '\0'; i++) {
                    if (token[i] != ' ' && token[i] != ',') {
                        if (xFlag == 0) {
                            x = token[i] - '0';
                            xFlag = 1;
                        } else {
                            y = token[i] - '0';
                            break;
                        }
                    }
                }
                if (x < 1 || x > 3 || y > 3) {
                    send(currSock, "INVL|29|Please enter a valid command|", 38, 0);
                    continue;
                }
                y--;
                x--;
                int index = y * 3 + x;
                if (g->board[index] != 'X' && g->board[index] != 'O') {
                    g->board[index] = currentPlayer;
                } else {
                    send(currSock, "INVL|29|Please enter a valid command|", 38, 0);
                    continue;
                }
                for (int i = 0; i < 3; i++) {
                    if (g->board[i * 3] != '.' &&
                        g->board[i * 3] == g->board[i * 3 + 1] &&
                        g->board[i * 3] == g->board[i * 3 + 2]) {
                        win = 1;
                        break;
                    }
                }
                if (win == 0) {
                    for (int i = 0; i < 3; i++) {
                        if (g->board[i] != '.' &&
                            g->board[i] == g->board[3 + i] &&
                            g->board[i] == g->board[2 * 3 + i]) {
                            win = 1;
                            break;
                        }
                    }
                }
                if (win == 0) {
                    if (g->board[0] != '.' && g->board[0] == g->board[4] && g->board[0] == g->board[8]) {
                        win = 1;
                    } else if (g->board[2] != '.' && g->board[2] == g->board[4] && g->board[2] == g->board[6]) {
                        win = 1;
                    }
                }
                if (win == 1) {
                    char buffer[150];
                    if (currentPlayer == 'X') {
                        snprintf(buffer, 150, "OVER|%ld|W|%s has won|", 10 + strlen(g->name_X), g->name_X);
                        send(currSock, buffer, strlen(buffer), 0);
                        send(oppSock, buffer, strlen(buffer), 0);
                    } else {
                        snprintf(buffer, 150, "OVER|%ld|W|%s has won|", 10 + strlen(g->name_X), g->name_O);
                        send(currSock, buffer, strlen(buffer), 0);
                        send(oppSock, buffer, strlen(buffer), 0);
                    }
                    isValid = 1;
                    gameStatus = 1;
                    return (void *)(intptr_t)1;
                }
                int draw = 0;
                for (int i = 0; i < 9; i++) {
                    if (g->board[i] != '.') {
                        draw++;
                    }
                }
                if (draw == 9) {
                    send(currSock, "OVER|14|D|Board is full|", 25, 0);
                    send(oppSock, "OVER|14|D|Board is full|", 25, 0);
                    isValid = 1;
                    gameStatus = 1;
                    return (void *)(intptr_t)1;
                }
                char buffer[150];
                snprintf(buffer, 150, "MOVD|%d|%c|%d,%d|%s|", 18, currentPlayer, x + 1, y + 1, g->board);
                send(currSock, buffer, strlen(buffer), 0);
                send(oppSock, buffer, strlen(buffer), 0);
                isValid = 1;
            } else if (strcmp(token, "RSGN") == 0) {
                char buffer[150];
                send(currSock, "OVER|20|L|You have resigned|", 29, 0);
                if (currentPlayer == 'X') {
                    snprintf(buffer, 150, "OVER|%ld|W|%s has resigned|", strlen(g->name_X) + 2 + 13, g->name_X);
                } else {
                    snprintf(buffer, 150, "OVER|%ld|W|%s has resigned|", strlen(g->name_O) + 2 + 13, g->name_O);
                }
                send(oppSock, buffer, strlen(buffer), 0);
                isValid = 1;
                gameStatus = 1;
            } else if (strcmp(token, "DRAW") == 0) {
                token = strtok(NULL, "|");
                token = strtok(NULL, "|");
                if (strcmp(token, "S") == 0) {
                    send(oppSock, "DRAW|2|S|", 10, 0);
                    isValid = 1;
                } else if (strcmp(token, "A") == 0) {
                    send(currSock, "OVER|15|D|Draw accepted|", 25, 0);
                    send(oppSock, "OVER|15|D|Draw accepted|", 25, 0);
                    isValid = 1;
                    gameStatus = 1;
                    return (void *)(intptr_t)1;
                } else {
                    send(oppSock, "DRAW|2|R|", 10, 0);
                    drawRejected = 1;
                    isValid = 1;
                }
            } else {
                send(currSock, "INVL|29|Please enter a valid command|", 38, 0);
            }
        }
        drawRejected = 0;
        win = 0;
    }
    close(currSock);
    close(oppSock);
    g->active = 0;
    return (void *)(intptr_t)1;
}

int main(int argc, char **argv) {
    if (argc != 2) {
        fprintf(stderr, "Error: no port number\n");
        return 1;
    }
    int portTest = atoi(argv[1]);
    if (portTest < 0 || portTest > 65535) {
        fprintf(stderr, "Error: invalid port number\n");
        return 1;
    }
    for (int i = 0; i < 100; i++) {
        games[i].active = 0;
    }
    for (int i = 0; i < 200; i++) {
        names[i] = " ";
    }
    serverInitialize(argv[1]);
    return 0;
}
